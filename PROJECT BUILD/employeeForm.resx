<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="RefreshDB.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>